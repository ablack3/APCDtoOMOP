/*
THIS SCRIPT CREATES THE STG.CPT_MAP TABLE WHICH IS A
CROSSWALK BETWEEN CPT + CPT_MODIFIER COMBINATIONS AND THIER STANDARD CONCEPTS


-- SCRATCH CODE
SELECT COUNT(*) FROM STG.Me;
select count(*) from stg.PATKEY_LIST

SELECT TOP 10 * FROM STG.MC;

SELECT TOP 10 * FROM CDM.CONCEPT_RELATIONSHIP

-- CREATE A DX CODE SOURCE TO STANDARD CONCEPT MAPPING TABLE
SELECT TOP 10 * FROM CDM.CONCEPT
WHERE VOCABULARY_ID LIKE ('%CPT%');

SELECT TOP 10 * FROM CDM.CONCEPT
WHERE VOCABULARY_ID LIKE ('%HCPCS%');

SELECT TOP 10 * FROM CDM.CONCEPT
WHERE VOCABULARY_ID LIKE ('%MOD%');

SELECT --TOP 10
   concept_class_id,
   COUNT(*) AS N
FROM CDM.CONCEPT
WHERE VOCABULARY_ID IN ('CPT4', 'HCPCS') AND CONCEPT_CLASS_ID IN('CPT4 Modifier', 'HCPCS Modifier')
GROUP BY CONCEPT_CLASS_ID
-- ARE THERE ANY CPT MODIFIERS THAT ARE NOT ALSO IN CPT MODIFIER?
-- WE WILL JUST GO WITH CPT MODIFIERS TO MAKE THINGS SIMPLER
*/

-- CREATE CPT MODIFIER TO STANDARD CONCEPT MAPPING
DROP TABLE IF EXISTS  ##CPT_MOD_MAP;
-- Get CPT modifier codes
-- Ignore distinction between cpt and hcpcs modifiers and just use cpt modifiers.
WITH T1 AS(
SELECT --TOP 10
    DISTINCT
    CONCEPT_CODE AS SOURCE_CONCEPT_CODE,
    CONCEPT_ID AS SOURCE_CONCEPT_ID
FROM CDM.CONCEPT
WHERE VOCABULARY_ID IN ('CPT4') AND CONCEPT_CLASS_ID IN('CPT4 Modifier')
)
-- Get the standard procedure modifier concepts
,T2 AS(
    SELECT DISTINCT T1.*,
        RELATIONSHIP_ID,
        CR.CONCEPT_ID_2 AS TARGET_CONCEPT_ID
    FROM T1
    INNER JOIN CDM.CONCEPT_RELATIONSHIP CR
    ON T1.SOURCE_CONCEPT_ID = CR.CONCEPT_ID_1
    WHERE RELATIONSHIP_ID = 'Maps to'
)
-- Get the concept info for the standard concepts
SELECT *
    -- SOURCE_CONCEPT_CODE AS CPT_MOD
INTO ##CPT_MOD_MAP
FROM T2
INNER JOIN CDM.CONCEPT C ON T2.TARGET_CONCEPT_ID = C.CONCEPT_ID;
GO


/*
SELECT * FROM ##CPT_MOD_MAP ORDER BY SOURCE_CONCEPT_CODE

-- CHECK THAT THERE IS ONLY ONE ROW PER MODIFIER ID
SELECT N AS NUM_ROWS_FOR_CODE, COUNT(*) AS NUM_CODES
FROM(
    SELECT SOURCE_CONCEPT_CODE, COUNT(*) AS N FROM ##CPT_MOD_MAP GROUP BY SOURCE_CONCEPT_CODE
) T1
GROUP BY N

*/

-- CREATE THE ##CPT_MAP CROSSWALK TABLE
DROP TABLE IF EXISTS  ##CPT_MAP;
-- Get CPT codes
WITH T1 AS(
SELECT --TOP 10
    VOCABULARY_ID AS SOURCE_VOCABULARY_ID,
    CONCEPT_CODE AS SOURCE_CONCEPT_CODE,
    CONCEPT_ID AS SOURCE_CONCEPT_ID
FROM CDM.CONCEPT
WHERE VOCABULARY_ID IN ('CPT4', 'HCPCS')
),
-- Get the standard procedure concepts
T2 AS(
    SELECT T1.*,
        RELATIONSHIP_ID,
        CR.CONCEPT_ID_2 AS TARGET_CONCEPT_ID
    FROM T1
    INNER JOIN CDM.CONCEPT_RELATIONSHIP CR
    ON T1.SOURCE_CONCEPT_ID = CR.CONCEPT_ID_1
    WHERE RELATIONSHIP_ID = 'Maps to'
)
-- Get the concept info for the standard concepts
,T3 AS(
    SELECT *
    FROM T2
    INNER JOIN CDM.CONCEPT C
    ON T2.TARGET_CONCEPT_ID = C.CONCEPT_ID
)
-- SELECT * FROM T3
-- GET SOURCE CPT FIELD THAT CONTAINS BOTH CPT4 AND HCPCS WHICH DO NOT OVERLAP
,SOURCE_CPT AS(
    SELECT CPT,
        COALESCE(MOD1, MOD2, MOD3, MOD4, '0') AS CPT_MODIFIER,
        COUNT(*) AS N_RECORDS
    FROM STG.MC
    GROUP BY CPT,  COALESCE(MOD1, MOD2, MOD3, MOD4, '0')
)
,SOURCE_TO_STANDARD_CPT AS(
SELECT
    CPT,
    CPT_MODIFIER,
    N_RECORDS,
    -- When 'maps to' concept_id is missing then fill with 0
    COALESCE(CONCEPT_ID, 0) AS PROCEDURE_CONCEPT_ID,
    -- DEFAULT DOMAIN FOR CPT/HCPCS CODES IS THE PROCEDURE DOMAIN
    COALESCE(DOMAIN_ID, 'Procedure') AS DOMAIN_ID,
    CPT AS PROCEDURE_SOURCE_VALUE,
    COALESCE(SOURCE_CONCEPT_ID, 0) AS PROCEDURE_SOURCE_CONCEPT_ID
FROM SOURCE_CPT
LEFT JOIN T3
ON SOURCE_CPT.CPT = T3.SOURCE_CONCEPT_CODE
)
-- MERGE IN MODIFIER CONCEPT INFO
SELECT CPT.*,
    CPT_MOD.CONCEPT_ID AS MODIFIER_CONCEPT_ID,
    CPT_MOD.SOURCE_CONCEPT_CODE AS MODIFIER_SOURCE_VALUE
    INTO ##CPT_MAP
    FROM SOURCE_TO_STANDARD_CPT CPT
    LEFT JOIN ##CPT_MOD_MAP CPT_MOD
    ON CPT.CPT_MODIFIER = CPT_MOD.SOURCE_CONCEPT_CODE
;
GO



/*
select * from ##cpt_map;
-- Do some data checks
-- THIS TABLE HAS A COMPOSITE KEY:CPT + CPT_MODIFIER
SELECT COUNT(*) FROM  STG.CPT_MAP
SELECT TOP 100 * FROM  STG.CPT_MAP
SELECT DISTINCT DOMAIN_ID FROM  STG.CPT_MAP;

-- CHECK THAT THERE IS ONLY ONE ROW PER CPT CPT_MODIFIER COMBINATION
SELECT N AS NUM_ROWS_FOR_CODE, COUNT(*) AS NUM_CODES
FROM(
    SELECT CPT, CPT_MODIFIER, COUNT(*) AS N
    FROM STG.CPT_MAP
    GROUP BY CPT, CPT_MODIFIER
) T1
GROUP BY N

GO;

*/

/*
-- which domains do CPT/HCPCS codes map to?
-- about 50% of records map to the PROCEDURE domain which is the default
-- 27% go to Observation,
-- 3% go to drug,
-- 3% to device
-- 5% go to procedure
-- 15% go to measurement

WITH T1 AS (
    SELECT DOMAIN_ID, SUM(N_RECORDS) AS N_RECORDS FROM STG.CPT_MAP GROUP BY DOMAIN_ID
)
SELECT DOMAIN_ID, N_RECORDS, 1.0*N_RECORDS/SUM(N_RECORDS) OVER() AS PCT_RECORDS
FROM T1

-- HOW SHOULD WE HANDLE CHECKING THAT DATES FOR STANDARD CONCEPTS ARE VALID?


SELECT COUNT(*) FROM STG.MC;

SELECT TOP 100 * FROM STG.MC WHERE OP IS NOT NULL;
SELECT TOP 10 * FROM ##CPT_MAP;
*/



-- CREATE ##TRM_CPT - TEMP TABLE WITH SOURCE AND TARGET FIELDS FOR CPT DATA
DROP TABLE IF EXISTS ##TRM_CPT;
SELECT
    A.CPT
    ,COALESCE(A.MOD1, A.MOD2, A.MOD3, A.MOD4, '0') AS MOD
    ,A.PATKEY AS PERSON_ID
    ,COALESCE(C.PROCEDURE_CONCEPT_ID, 0) AS PROCEDURE_CONCEPT_ID
    ,TRY_CAST(A.FDATE AS DATE) AS PROCEDURE_DATE
    ,TRY_CAST(A.FDATE AS DATETIME2) AS PROCEDURE_DATETIME
    ,32468 AS PROCEDURE_TYPE_CONCEPT_ID -- 32468 = INFERRED FROM CLAIM
    ,COALESCE(C.MODIFIER_CONCEPT_ID, 0) AS MODIFIER_CONCEPT_ID
    ,A.QTY AS QUANTITY
    ,COALESCE(
            CASE WHEN A.ATT_NPI IN(SELECT NPI FROM CDM.PROVIDER) THEN A.ATT_NPI ELSE NULL END,
            CASE WHEN A.SERVICING_NPI IN(SELECT NPI FROM CDM.PROVIDER) THEN A.SERVICING_NPI ELSE NULL END,
            CASE WHEN A.NPI IN(SELECT NPI FROM CDM.PROVIDER) THEN A.NPI ELSE NULL END
    ) AS PROVIDER_ID
    ,B.VISIT_OCCURRENCE_ID
    ,B.VISIT_DETAIL_ID
    ,C.PROCEDURE_SOURCE_VALUE
    ,C.PROCEDURE_SOURCE_CONCEPT_ID
    ,C.MODIFIER_SOURCE_VALUE
    ,COALESCE(C.DOMAIN_ID, 'Procedure') as DOMAIN_ID
INTO ##TRM_CPT
FROM STG.MC A
JOIN TRM.VISIT_DETAIL B
ON A.IDN = B.VISIT_DETAIL_ID
JOIN ##CPT_MAP C
ON A.CPT = C.CPT AND COALESCE(A.MOD1, A.MOD2, A.MOD3, A.MOD4, '0') = C.CPT_MODIFIER
WHERE A.CPT IS NOT NULL

GO

/*
where are these codes mapped to? 5 different tables.
SELECT DOMAIN_ID, COUNT(*) FROM ##TRM_CPT GROUP BY DOMAIN_ID;
*/

-- INSERT CPT/HCPCS RECORDS INTO TRM.PROCEDURE_OCCURRENCE
DELETE FROM TRM.PROCEDURE_OCCURRENCE WHERE SOURCE = 'STG.MC.CPT';
INSERT INTO TRM.PROCEDURE_OCCURRENCE
SELECT
    PERSON_ID,
    PROCEDURE_CONCEPT_ID,
    PROCEDURE_DATE,
    PROCEDURE_DATETIME,
    PROCEDURE_TYPE_CONCEPT_ID,
    MODIFIER_CONCEPT_ID,
    QUANTITY,
    PROVIDER_ID,
    VISIT_OCCURRENCE_ID,
    VISIT_DETAIL_ID,
    PROCEDURE_SOURCE_VALUE,
    PROCEDURE_SOURCE_CONCEPT_ID,
    MODIFIER_SOURCE_VALUE,
    'STG.MC.CPT' AS SOURCE
FROM ##TRM_CPT
WHERE DOMAIN_ID = 'Procedure';
GO

-- SELECT TOP 10 * FROM ##TRM_CPT

-- INSERT CPT/HCPCS RECORDS INTO TRM.DRUG_EXPOSURE
DELETE FROM TRM.DRUG_EXPOSURE WHERE SOURCE = 'STG.MC.CPT';
INSERT INTO TRM.DRUG_EXPOSURE
SELECT
    PERSON_ID
    ,PROCEDURE_CONCEPT_ID AS DRUG_CONCEPT_ID
    ,PROCEDURE_DATE AS DRUG_EXPOSURE_START_DATE
    ,PROCEDURE_DATETIME AS DRUG_EXPOSURE_START_DATETIME
    ,PROCEDURE_DATE AS DRUG_EXPOSURE_END_DATE
    ,PROCEDURE_DATETIME AS DRUG_EXPOSURE_END_DATETIME
    ,PROCEDURE_DATE AS VERBATIM_END_DATE
    ,0 AS DRUG_TYPE_CONCEPT_ID
    ,NULL AS STOP_REASON
    ,NULL AS REFILLS
    ,QUANTITY
    ,NULL AS DAYS_SUPPLY
    ,NULL AS SIG
    ,0 AS ROUTE_CONCEPT_ID
    ,NULL AS LOT_NUMBER
    ,PROVIDER_ID
    ,VISIT_OCCURRENCE_ID
    ,VISIT_DETAIL_ID
    ,PROCEDURE_SOURCE_VALUE AS DRUG_SOURCE_VALUE
    ,PROCEDURE_SOURCE_CONCEPT_ID AS DRUG_SOURCE_CONCEPT_ID
    ,NULL AS ROUTE_SOURCE_VALUE
    ,NULL AS DOSE_UNIT_SOURCE_VALUE
    ,'STG.MC.CPT' AS SOURCE
FROM ##TRM_CPT
WHERE DOMAIN_ID = 'Drug'
GO

-- INSERT CPT/HCPCS RECORDS INTO TRM.DEVICE_EXPOSURE
DELETE FROM TRM.DEVICE_EXPOSURE WHERE SOURCE = 'STG.MC.CPT';
INSERT INTO TRM.DEVICE_EXPOSURE
SELECT
    PERSON_ID
    ,PROCEDURE_CONCEPT_ID AS DEVICE_CONCEPT_ID
    ,PROCEDURE_DATE AS DEVICE_EXPOSURE_START_DATE
    ,PROCEDURE_DATETIME AS DEVICE_EXPOSURE_START_DATETIME
    ,PROCEDURE_DATE AS DEVICE_EXPOSURE_END_DATE
    ,PROCEDURE_DATETIME AS DEVICE_EXPOSURE_END_DATETIME
    ,44818705 AS DEVICE_TYPE_CONCEPT_ID -- Inferred from procedure claim
    ,NULL AS UNIQUE_DEVICE_ID
    ,QUANTITY
    ,PROVIDER_ID
    ,VISIT_OCCURRENCE_ID
    ,VISIT_DETAIL_ID
    ,PROCEDURE_SOURCE_VALUE AS DEVICE_SOURCE_VALUE
    ,PROCEDURE_SOURCE_CONCEPT_ID AS DEVICE_SOURCE_CONCEPT_ID
    ,'STG.MC.CPT' AS SOURCE
FROM ##TRM_CPT
WHERE DOMAIN_ID = 'Device'
GO

-- INSERT CPT/HCPCS RECORDS INTO TRM.MEASUREMENT
DELETE FROM TRM.MEASUREMENT WHERE SOURCE = 'STG.MC.CPT';
INSERT INTO TRM.MEASUREMENT
SELECT
    PERSON_ID
    ,PROCEDURE_CONCEPT_ID AS MEASUREMENT_CONCEPT_ID
    ,PROCEDURE_DATE AS MEASUREMENT_DATE
    ,PROCEDURE_DATETIME AS MEASUREMENT_DATETIME
    ,NULL AS MEASUREMENT_TIME
    ,PROCEDURE_TYPE_CONCEPT_ID AS MEASUREMENT_TYPE_CONCEPT_ID
    ,0 AS OPERATOR_CONCEPT_ID
    ,NULL AS VALUE_AS_NUMBER
    ,0 AS VALUE_AS_CONCEPT_ID
    ,0 AS UNIT_CONCEPT_ID
    ,NULL AS RANGE_LOW
    ,NULL AS RANGE_HIGH
    ,PROVIDER_ID
    ,VISIT_OCCURRENCE_ID
    ,VISIT_DETAIL_ID
    ,PROCEDURE_SOURCE_VALUE AS MEASUREMENT_SOURCE_VALUE
    ,PROCEDURE_SOURCE_CONCEPT_ID AS MEASUREMENT_SOURCE_CONCEPT_ID
    ,NULL AS UNIT_SOURCE_VALUE
    ,NULL AS VALUE_SOURCE_VALUE
    ,'STG.MC.CPT' AS SOURCE
FROM ##TRM_CPT
WHERE DOMAIN_ID = 'Measurement'
GO


-- INSERT CPT/HCPCS RECORDS INTO TRM.OBSERVATION
DELETE FROM TRM.OBSERVATION WHERE SOURCE = 'STG.MC.CPT';
INSERT INTO TRM.OBSERVATION
SELECT
    PERSON_ID
    ,PROCEDURE_CONCEPT_ID AS OBSERVATION_CONCEPT_ID
    ,PROCEDURE_DATE AS OBSERVATION_DATE
    ,PROCEDURE_DATETIME AS OBSERVATION_DATETIME
    ,32467 AS OBSERVATION_TYPE_CONCEPT_ID -- INFERRED FROM CLAIM
    ,QUANTITY AS VALUE_AS_NUMBER
    ,NULL AS VALUE_AS_STRING
    ,0 AS VALUE_AS_CONCEPT_ID
    ,0 AS QUALIFIER_CONCEPT_ID
    ,0 AS UNIT_CONCEPT_ID
    ,PROVIDER_ID
    ,VISIT_OCCURRENCE_ID
    ,VISIT_DETAIL_ID
    ,PROCEDURE_SOURCE_VALUE AS OBSERVATION_SOURCE_VALUE
    ,PROCEDURE_SOURCE_CONCEPT_ID AS OBSERVATION_SOURCE_CONCEPT_ID
    ,NULL AS UNIT_SOURCE_VALUE
    ,NULL AS QUALIFIER_SOURCE_VALUE
    ,NULL AS OBSERVATION_EVENT_ID
    ,0 AS OBS_EVENT_FIELD_CONCEPT_ID
    ,NULL AS VALUE_AS_DATETIME
    ,'STG.MC.CPT' AS SOURCE
FROM ##TRM_CPT
WHERE DOMAIN_ID = 'Observation'
GO

