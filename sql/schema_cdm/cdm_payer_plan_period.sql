/*
POPULATE THE CDM.PAYER_PLAN_PERIOD TABLE
ONE ROW PER UNIQUE COMBINATION OF PAYER_TYEP, PERSON, AND CONTINUOUS COVERAGE PERIOD

NOTE THAT WE CANNOT DISTINGUISH BETWEEN DIFFERENT COMMERCIAL PAYERS
(SINCE THAT DATA REQUIRES SPECIAL PERMISSION TO GET )
SO IF SOMEONE SWITCHES COMMERCIAL PLANS WITHOUT A GAP IN COVERAGE THAT CHANGE WILL NOT BE RECORDED IN THIS TABLE

WE WILL ONLY KNOW IF A PERSON SWITCHES PAYER TYPES (COMMERCIAL, MEDICARE, MEDICAID)


THIS LOGIC IS ESSENTIALLY THE SAME AS THE OBSERVATION PERIOD TABLE
BUT WE WILL RUN THE SAME OPERATION SEPARATELY ON MEDICARE, MEDICAID, AND COMMERCIAL CLAIMS

I'M SURE THERE IS A MORE EFFICIENT WAY TO PROGRAM THIS BUT WE WILL SIMPLY RUN THE
SAME CODE THREE TIMES ON SUBSETS OF THE STAGE MEDICAL ELIGIBILITY TABLE.
NOTE THAT WE DO NOT CONSIDER PHARMACY ELIGIBILITY FOR SIMPLICITY.
*/

-- CREATE TEMP TABLE ##PAYER_PLAN_PERIOD
DROP TABLE IF EXISTS ##PAYER_PLAN_PERIOD;
CREATE TABLE ##PAYER_PLAN_PERIOD (
      PAYER_PLAN_PERIOD_ID BIGINT NOT NULL IDENTITY(1,1)
      ,PERSON_ID BIGINT NOT NULL
      ,CONTRACT_PERSON_ID BIGINT NULL
      ,PAYER_PLAN_PERIOD_START_DATE DATE NOT NULL
      ,PAYER_PLAN_PERIOD_END_DATE DATE NOT NULL
      ,PAYER_CONCEPT_ID INTEGER NOT NULL
      ,PLAN_CONCEPT_ID INTEGER NOT NULL
      ,CONTRACT_CONCEPT_ID INTEGER NOT NULL
      ,SPONSOR_CONCEPT_ID INTEGER NOT NULL
      ,STOP_REASON_CONCEPT_ID INTEGER NOT NULL
      ,PAYER_SOURCE_VALUE VARCHAR(50) NULL
      ,PAYER_SOURCE_CONCEPT_ID INTEGER NOT NULL
      ,PLAN_SOURCE_VALUE VARCHAR(50) NULL
      ,PLAN_SOURCE_CONCEPT_ID INTEGER NOT NULL
      ,CONTRACT_SOURCE_VALUE VARCHAR(50) NULL
      ,CONTRACT_SOURCE_CONCEPT_ID INTEGER NOT NULL
      ,SPONSOR_SOURCE_VALUE VARCHAR(50) NULL
      ,SPONSOR_SOURCE_CONCEPT_ID INTEGER NOT NULL
      ,FAMILY_SOURCE_VALUE VARCHAR(50) NULL
      ,STOP_REASON_SOURCE_VALUE VARCHAR(50) NULL
      ,STOP_REASON_SOURCE_CONCEPT_ID INTEGER NOT NULL
);
GO

-- ADD COMMERCIAL ELIGIBILITY PERIODS TO ##PAYER_PLAN_PERIOD
WITH T1 AS(
 -- CONVERT YEAR AND MONTH TO AN INTEGER REPRESENTING NUM MONTHS SINCE Jan 1960
    SELECT --TOP 1000
        ME.PATKEY AS PATKEY
        ,(ME.YEAR - 1960)*12 + ME.MONTH - 1 AS ELIG_PERIOD
    FROM STG.ME AS ME
    WHERE COMMERCIAL_FLAG = 1
)
,T2 AS(
    -- ADD LAG MONTH SO WE CAN IDENTIFY GAPS IN COVERAGE
    SELECT
	    PATKEY AS PATKEY
	    ,ELIG_PERIOD AS ELIG_PERIOD
	    ,LAG(ELIG_PERIOD, 1, NULL) OVER (PARTITION BY PATKEY ORDER BY ELIG_PERIOD) AS LAG_ELIG_PERIOD
    FROM T1
)
,T3 AS(
    -- IDENTIFY GAPS IN COVERAGE
    SELECT
		PATKEY AS PATKEY
		,ELIG_PERIOD AS ELIG_PERIOD
		,LAG_ELIG_PERIOD AS LAG_ELIG_PERIOD
		,CASE
			WHEN LAG_ELIG_PERIOD IS NULL OR ELIG_PERIOD - LAG_ELIG_PERIOD > 1
				THEN 1
				ELSE 0
		END AS NEW_PERIOD_FLAG
    FROM T2
)
,T4 AS(
    -- USE CUMULATIVE SUM TO CREATE AN ID FOR EACH CONTINUOUS PERIOD OF ELIGIBILITY
    SELECT
		PATKEY AS PATKEY
		,ELIG_PERIOD AS ELIG_PERIOD
		,SUM(NEW_PERIOD_FLAG) OVER (PARTITION BY PATKEY ORDER BY ELIG_PERIOD ROWS UNBOUNDED PRECEDING) AS PERIOD_ID
    FROM T3
)
,T5 AS(
    -- GET START AND END DATES (REPRESENTED USING AN INTEGER) FOR EACH PERIOD
    SELECT
		PATKEY AS PATKEY
		,MIN(ELIG_PERIOD) OVER (PARTITION BY PATKEY, PERIOD_ID) AS PERIOD_START
		,MAX(ELIG_PERIOD) OVER (PARTITION BY PATKEY, PERIOD_ID) AS PERIOD_END
    FROM T4
)
,T6 AS(
    -- GET DATE PARTS (MONTH AND YEAR) FOR START AND END DATES
    SELECT DISTINCT
	    PATKEY
	    ,CAST(PERIOD_START AS INT) % 12 + 1 AS MONTH_START
	    ,CAST(PERIOD_END AS INT) % 12 + 1 AS MONTH_END
	    ,FLOOR(PERIOD_START/12) + 1960 AS YEAR_START
	    ,FLOOR(PERIOD_END/12) + 1960 AS YEAR_END
    FROM T5
)
-- CONVERT START AND END DATES TO DATE TYPE
INSERT INTO ##PAYER_PLAN_PERIOD
SELECT
    PATKEY AS PERSON_ID
    ,CAST(NULL AS BIGINT) AS CONTRACT_PERSON_ID
    ,DATEFROMPARTS(YEAR_START, MONTH_START, 1) AS PAYER_PLAN_PERIOD_START_DATE
    ,EOMONTH(DATEFROMPARTS(YEAR_END, MONTH_END, 1), 0) AS PAYER_PLAN_PERIOD_END_DATE
    ,418 AS PAYER_CONCEPT_ID -- 418	= Commercial Indemnity
    ,0 AS PLAN_CONCEPT_ID
    ,0 AS CONTRACT_CONCEPT_ID
    ,0 AS SPONSOR_CONCEPT_ID
    ,0 AS STOP_REASON_CONCEPT_ID
    ,'COMMERCIAL' ASPAYER_SOURCE_VALUE
    ,418 AS PAYER_SOURCE_CONCEPT_ID -- 418 = Commercial Indemnity
    ,CAST(NULL AS VARCHAR(50)) AS PLAN_SOURCE_VALUE
    ,0 AS PLAN_SOURCE_CONCEPT_ID
    ,CAST(NULL AS VARCHAR(50)) AS CONTRACT_SOURCE_VALUE
    ,0 AS CONTRACT_SOURCE_CONCEPT_ID
    ,CAST(NULL AS VARCHAR(50)) AS SPONSOR_SOURCE_VALUE
    ,0 AS SPONSOR_SOURCE_CONCEPT_ID
    ,CAST(NULL AS VARCHAR(50)) AS FAMILY_SOURCE_VALUE
    ,CAST(NULL AS VARCHAR(50)) STOP_REASON_SOURCE_VALUE
    ,0 AS STOP_REASON_SOURCE_CONCEPT_ID
FROM T6;
GO

-- ADD MEDICARE ELIGIBILITY PERIODS TO ##PAYER_PLAN_PERIOD
WITH T1 AS(
 -- CONVERT YEAR AND MONTH TO AN INTEGER REPRESENTING NUM MONTHS SINCE Jan 1960
    SELECT
        ME.PATKEY AS PATKEY
        ,(ME.YEAR - 1960)*12 + ME.MONTH - 1 AS ELIG_PERIOD
    FROM STG.ME AS ME
    WHERE MEDICARE_FLAG = 1
)
,T2 AS(
    -- ADD LAG MONTH SO WE CAN IDENTIFY GAPS IN COVERAGE
    SELECT
	    PATKEY AS PATKEY
	    ,ELIG_PERIOD AS ELIG_PERIOD
	    ,LAG(ELIG_PERIOD, 1, NULL) OVER (PARTITION BY PATKEY ORDER BY ELIG_PERIOD) AS LAG_ELIG_PERIOD
    FROM T1
)
,T3 AS(
    -- IDENTIFY GAPS IN COVERAGE
    SELECT
		PATKEY AS PATKEY
		,ELIG_PERIOD AS ELIG_PERIOD
		,LAG_ELIG_PERIOD AS LAG_ELIG_PERIOD
		,CASE
			WHEN LAG_ELIG_PERIOD IS NULL OR ELIG_PERIOD - LAG_ELIG_PERIOD > 1
				THEN 1
				ELSE 0
		END AS NEW_PERIOD_FLAG
    FROM T2
)
,T4 AS(
    -- USE CUMULATIVE SUM TO CREATE AN ID FOR EACH CONTINUOUS PERIOD OF ELIGIBILITY
    SELECT
		PATKEY AS PATKEY
		,ELIG_PERIOD AS ELIG_PERIOD
		,SUM(NEW_PERIOD_FLAG) OVER (PARTITION BY PATKEY ORDER BY ELIG_PERIOD ROWS UNBOUNDED PRECEDING) AS PERIOD_ID
    FROM T3
)
,T5 AS(
    -- GET START AND END DATES (REPRESENTED USING AN INTEGER) FOR EACH PERIOD
    SELECT
		PATKEY AS PATKEY
		,MIN(ELIG_PERIOD) OVER (PARTITION BY PATKEY, PERIOD_ID) AS PERIOD_START
		,MAX(ELIG_PERIOD) OVER (PARTITION BY PATKEY, PERIOD_ID) AS PERIOD_END
    FROM T4
)
,T6 AS(
    -- GET DATE PARTS (MONTH AND YEAR) FOR START AND END DATES
    SELECT DISTINCT
	    PATKEY
	    ,CAST(PERIOD_START AS INT) % 12 + 1 AS MONTH_START
	    ,CAST(PERIOD_END AS INT) % 12 + 1 AS MONTH_END
	    ,FLOOR(PERIOD_START/12) + 1960 AS YEAR_START
	    ,FLOOR(PERIOD_END/12) + 1960 AS YEAR_END
    FROM T5
)
-- CONVERT START AND END DATES TO DATE TYPE
INSERT INTO ##PAYER_PLAN_PERIOD
SELECT
    PATKEY AS PERSON_ID
    ,CAST(NULL AS BIGINT) AS CONTRACT_PERSON_ID
    ,DATEFROMPARTS(YEAR_START, MONTH_START, 1) AS PAYER_PLAN_PERIOD_START_DATE
    ,EOMONTH(DATEFROMPARTS(YEAR_END, MONTH_END, 1), 0) AS PAYER_PLAN_PERIOD_END_DATE
    ,280 AS PAYER_CONCEPT_ID -- 280=Medicare
    ,0 AS PLAN_CONCEPT_ID
    ,0 AS CONTRACT_CONCEPT_ID
    ,0 AS SPONSOR_CONCEPT_ID
    ,0 AS STOP_REASON_CONCEPT_ID
    ,'MEDICARE' ASPAYER_SOURCE_VALUE
    ,280 AS PAYER_SOURCE_CONCEPT_ID -- 280=Medicare
    ,CAST(NULL AS VARCHAR(50)) AS PLAN_SOURCE_VALUE
    ,0 AS PLAN_SOURCE_CONCEPT_ID
    ,CAST(NULL AS VARCHAR(50)) AS CONTRACT_SOURCE_VALUE
    ,0 AS CONTRACT_SOURCE_CONCEPT_ID
    ,CAST(NULL AS VARCHAR(50)) AS SPONSOR_SOURCE_VALUE
    ,0 AS SPONSOR_SOURCE_CONCEPT_ID
    ,CAST(NULL AS VARCHAR(50)) AS FAMILY_SOURCE_VALUE
    ,CAST(NULL AS VARCHAR(50)) STOP_REASON_SOURCE_VALUE
    ,0 AS STOP_REASON_SOURCE_CONCEPT_ID
 FROM T6;
 GO


-- ADD MEDICAID ELIGIBILITY PERIODS TO ##PAYER_PLAN_PERIOD
WITH T1 AS(
 -- CONVERT YEAR AND MONTH TO AN INTEGER REPRESENTING NUM MONTHS SINCE Jan 1960
    SELECT
        ME.PATKEY AS PATKEY
        ,(ME.YEAR - 1960)*12 + ME.MONTH - 1 AS ELIG_PERIOD
    FROM STG.ME AS ME
    WHERE MEDICAID_FLAG = 1
)
,T2 AS(
    -- ADD LAG MONTH SO WE CAN IDENTIFY GAPS IN COVERAGE
    SELECT
	    PATKEY AS PATKEY
	    ,ELIG_PERIOD AS ELIG_PERIOD
	    ,LAG(ELIG_PERIOD, 1, NULL) OVER (PARTITION BY PATKEY ORDER BY ELIG_PERIOD) AS LAG_ELIG_PERIOD
    FROM T1
)
,T3 AS(
    -- IDENTIFY GAPS IN COVERAGE
    SELECT
		PATKEY AS PATKEY
		,ELIG_PERIOD AS ELIG_PERIOD
		,LAG_ELIG_PERIOD AS LAG_ELIG_PERIOD
		,CASE
			WHEN LAG_ELIG_PERIOD IS NULL OR ELIG_PERIOD - LAG_ELIG_PERIOD > 1
				THEN 1
				ELSE 0
		END AS NEW_PERIOD_FLAG
    FROM T2
)
,T4 AS(
    -- USE CUMULATIVE SUM TO CREATE AN ID FOR EACH CONTINUOUS PERIOD OF ELIGIBILITY
    SELECT
		PATKEY AS PATKEY
		,ELIG_PERIOD AS ELIG_PERIOD
		,SUM(NEW_PERIOD_FLAG) OVER (PARTITION BY PATKEY ORDER BY ELIG_PERIOD ROWS UNBOUNDED PRECEDING) AS PERIOD_ID
    FROM T3
)
,T5 AS(
    -- GET START AND END DATES (REPRESENTED USING AN INTEGER) FOR EACH PERIOD
    SELECT
		PATKEY AS PATKEY
		,MIN(ELIG_PERIOD) OVER (PARTITION BY PATKEY, PERIOD_ID) AS PERIOD_START
		,MAX(ELIG_PERIOD) OVER (PARTITION BY PATKEY, PERIOD_ID) AS PERIOD_END
    FROM T4
)
,T6 AS(
    -- GET DATE PARTS (MONTH AND YEAR) FOR START AND END DATES
    SELECT DISTINCT
	    PATKEY
	    ,CAST(PERIOD_START AS INT) % 12 + 1 AS MONTH_START
	    ,CAST(PERIOD_END AS INT) % 12 + 1 AS MONTH_END
	    ,FLOOR(PERIOD_START/12) + 1960 AS YEAR_START
	    ,FLOOR(PERIOD_END/12) + 1960 AS YEAR_END
    FROM T5
)
-- CONVERT START AND END DATES TO DATE TYPE
INSERT INTO ##PAYER_PLAN_PERIOD
SELECT
    PATKEY AS PERSON_ID
    ,CAST(NULL AS BIGINT) AS CONTRACT_PERSON_ID
    ,DATEFROMPARTS(YEAR_START, MONTH_START, 1) AS PAYER_PLAN_PERIOD_START_DATE
    ,EOMONTH(DATEFROMPARTS(YEAR_END, MONTH_END, 1), 0) AS PAYER_PLAN_PERIOD_END_DATE
    ,289 AS PAYER_CONCEPT_ID -- 289=Medicaid
    ,0 AS PLAN_CONCEPT_ID
    ,0 AS CONTRACT_CONCEPT_ID
    ,0 AS SPONSOR_CONCEPT_ID
    ,0 AS STOP_REASON_CONCEPT_ID
    ,'MEDICAID' ASPAYER_SOURCE_VALUE
    ,289 AS PAYER_SOURCE_CONCEPT_ID -- 289=Medicaid
    ,CAST(NULL AS VARCHAR(50)) AS PLAN_SOURCE_VALUE
    ,0 AS PLAN_SOURCE_CONCEPT_ID
    ,CAST(NULL AS VARCHAR(50)) AS CONTRACT_SOURCE_VALUE
    ,0 AS CONTRACT_SOURCE_CONCEPT_ID
    ,CAST(NULL AS VARCHAR(50)) AS SPONSOR_SOURCE_VALUE
    ,0 AS SPONSOR_SOURCE_CONCEPT_ID
    ,CAST(NULL AS VARCHAR(50)) AS FAMILY_SOURCE_VALUE
    ,CAST(NULL AS VARCHAR(50)) STOP_REASON_SOURCE_VALUE
    ,0 AS STOP_REASON_SOURCE_CONCEPT_ID
 FROM T6;
GO

-- LOAD DATA INTO CDM.PAYER_PLAN_PERIOD
TRUNCATE TABLE CDM.PAYER_PLAN_PERIOD;
INSERT INTO CDM.PAYER_PLAN_PERIOD
SELECT *
FROM ##PAYER_PLAN_PERIOD;
GO

/*
SELECT COUNT(*) FROM CDM.payer_plan_period;
SELECT COUNT(*) FROM ##PAYER_PLAN_PERIOD;
*/
